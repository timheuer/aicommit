name: "Build"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
  workflow_dispatch:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
jobs:
  build:
    outputs:
      version: ${{ steps.set_proj_version.outputs.PKG_VERSION }}
      relnotes: ${{ steps.set_proj_version.outputs.RELNOTES }}
    name: Build and package 
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_ADD_GLOBAL_TOOLS_TO_PATH: false
      DOTNET_MULTILEVEL_LOOKUP: 0
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      TERM: xterm
      PROJECT_PATH: "aicommits.csproj"

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build {{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Pack
      run: dotnet pack {{ env.PROJECT_PATH }} --configuration Release -o finalpackage --no-build

    - name: Publish artifact
      uses: actions/upload-artifact@v3
      with:
        name: nupkg
        path: finalpackage

    - name: Get version
      id: set_proj_version
      shell: pwsh
      run: |
        [xml]$nuspec = Get-Content {{ env.PROJECT_PATH }}
        $version=$nuspec.project.propertygroup.versionprefix
        $relnotes=$nuspec.project.propertygroup.packagereleasenotes
        Write-Output "::set-output name=PKG_VERSION::$version"
        Write-Output "::set-output name=RELNOTES::$relnotes"

  deploy:
    needs: build
    environment:
      name: production
      url: https://www.nuget.org/packages/aicommit
    name: Sign and publish
    runs-on: windows-latest # using windows agent due to nuget can't sign on linux yet
    steps:
      - name: Download Package artifact
        uses: actions/download-artifact@v3
        with:
          name: nupkg
      
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: latest

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: 7.0.x
          include-prerelease: true

      - name: Get certificate
        id: cert_file
        uses: timheuer/base64-to-file@master
        with:
          fileName: 'certfile.pfx'
          encodedString: ${{ secrets.SIGNING_CERT }}
      
      # Sign the package
      - name: Sign NuGet Package
        run: dotnet nuget sign **/*.nupkg --certificate-path ${{ steps.cert_file.outputs.filePath }} --certificate-password ${{ secrets.CERT_PWD }} --timestamper http://timestamp.digicert.com
      
      - name: Push to NuGet
        run: dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Add GPR Source
        run: dotnet nuget add source --username ${{ secrets.GPR_USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name GPR ${{ secrets.GPR_URI }}

      - name: Push to GitHub Packages
        run: dotnet nuget push **/*.nupkg -s "GPR" --skip-duplicate

      - name: Tag and Release
        id: tag_release
        uses: softprops/action-gh-release@v0.1.13
        with:
          body: ${{ needs.build.outputs.relnotes }}
          tag_name: ${{ needs.build.outputs.version }}
          files: |
            **/*.nupkg

      - name: Publish signed artifact
        uses: actions/upload-artifact@v3
        with:
          name: signednupkg
          path: .
